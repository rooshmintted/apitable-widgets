/**
 * APITable <https://github.com/apitable/apitable>
 * Copyright (C) 2022 APITable Ltd. <https://apitable.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import { utils } from '@rjsf/core';
import React, { useState } from 'react';
import styled from 'styled-components';
import { TitleField } from '../field';
import { getObjectDepth, getOptions } from '../utils';
const { canExpand } = utils;
const ObjectFieldTemplateWrapper = styled.div `
  display: flex;
  flex-direction: column;
  .field-object {
    padding-top: 0!important;
  }
`;
const InlineObjectChildren = styled.div `
  display: ${(props) => props.inline ? 'flex' : 'block'};  
  align-items: flex-start;
`;
const ObjectFieldLayout = (props) => {
    var _a, _b;
    const { properties, uiSchema } = props;
    const isInline = Boolean((_a = uiSchema['ui:options']) === null || _a === void 0 ? void 0 : _a.inline);
    const layout = (_b = uiSchema['ui:options']) === null || _b === void 0 ? void 0 : _b.layout;
    if (layout) {
        return (React.createElement(React.Fragment, null, layout.map(rowFieldNames => {
            const thisRowFields = properties.filter(ele => rowFieldNames.includes(ele.name));
            if (thisRowFields.length) {
                const width = isInline ? `${Math.round(100 / thisRowFields.length)}%` : '100%';
                return React.createElement(InlineObjectChildren, { inline: isInline }, thisRowFields.map((element, index) => (React.createElement("div", { key: index, style: { marginRight: '4px', width } }, element.content))));
            }
            return null;
        })));
    }
    const width = isInline ? `${Math.round(100 / properties.length)}%` : '100%';
    return (React.createElement(InlineObjectChildren, { inline: isInline }, properties.map((element, index) => (React.createElement("div", { key: index, style: { marginRight: '4px', width } }, element.content)))));
};
export const ObjectFieldTemplate = (props) => {
    var _a;
    const { title, required, disabled, readonly, uiSchema, idSchema, schema, formData, onAddClick, } = props;
    const hasCollapse = 'ui:options' in uiSchema && 'collapse' in uiSchema['ui:options'];
    const showTitle = 'ui:options' in uiSchema && 'showTitle' in uiSchema['ui:options'] ? Boolean(uiSchema['ui:options']['showTitle']) : true;
    const help = getOptions('help', uiSchema).value;
    const defaultCollapse = Boolean((_a = uiSchema['ui:options']) === null || _a === void 0 ? void 0 : _a.collapse);
    const [collapse, setCollapse] = useState(defaultCollapse);
    const currentObjectDepth = getObjectDepth(props);
    // const isInline = Boolean(uiSchema['ui:options']?.inline);
    // if (currentObjectDepth > 3) return null;
    return (React.createElement(ObjectFieldTemplateWrapper, null,
        (uiSchema['ui:title'] || title) && (showTitle && React.createElement(TitleField, { id: `${idSchema.$id}-${currentObjectDepth}`, title: title, required: required, help: help, hasCollapse: hasCollapse, onChange: setCollapse, defaultCollapse: defaultCollapse })),
        !collapse && React.createElement("div", null,
            React.createElement(ObjectFieldLayout, Object.assign({}, props)),
            canExpand(schema, uiSchema, formData) && (React.createElement("button", { onClick: onAddClick(schema), disabled: disabled || readonly })))));
};
export default ObjectFieldTemplate;
