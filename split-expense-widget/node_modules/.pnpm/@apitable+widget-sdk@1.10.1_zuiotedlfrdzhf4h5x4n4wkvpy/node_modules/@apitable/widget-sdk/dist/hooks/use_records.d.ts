/**
 * APITable <https://github.com/apitable/apitable>
 * Copyright (C) 2022 APITable Ltd. <https://apitable.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import { IRecordQuery } from '../interface';
import { Datasheet } from '../model';
import { DynamicRecord } from '../model/dynamic_record';
/**
 * Gets all the records under a given view in the datasheet.
 * Rerendering is triggered when the value of record, view configuration, field configuration changes.
 * Get all the records may cause lag due to a sharp increase in computation, so please use caution and test well.

 * @param viewId The ID for the view, pass undefined to return an empty array.
 * @param query query configuration parameters.
 * @returns
 *
 * ### Example
 * ```js
 * import { useRecords, useActiveViewId } from '@apitable/widget-sdk';
 *
 * // Show record name
 * function RecordsTitle() {
 *   const viewId = useActiveViewId();
 *   const records = useRecords(viewId);
 *   return (<div>
 *     {records.map(record => <p>{record.title}</p>)}
 *   </div>);
 * }
 * ```
 */
export declare function useRecords(viewId: string | undefined, query?: IRecordQuery): DynamicRecord[];
/**
 *
 * ## Support for loading the corresponding datasheet data records.
 *
 * @param datasheet Datasheet instance, by {@link useDatasheet} get.
 * @param viewId View ID, passing in undefined returns an empty array.
 * @param query query configuration parameters.
 * @returns
 *
 * ### Example
 * ```js
 * import { useRecords, useViewsMeta, useDatasheet } from '@apitable/widget-sdk';
 *
 * // Show the primary key of records the corresponding to the datasheetId(dstXXXXXXXX) datasheet
 * function RecordsTitle() {
 *   const datasheet = useDatasheet('dstXXXXXXXX');
 *   const viewsMeta = useViewsMeta(datasheet);
 *   const records = useRecords(datasheet, viewsMeta[0]?.id);
 *   return (
 *     <div>
 *       {records.map(record => <p>{record.title}</p>)}
 *     </div>
 *  );
 * }
 * ```
 */
export declare function useRecords(datasheet: Datasheet | undefined, viewId: string | undefined, query?: IRecordQuery): DynamicRecord[];
//# sourceMappingURL=use_records.d.ts.map