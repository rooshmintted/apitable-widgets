/**
 * APITable <https://github.com/apitable/apitable>
 * Copyright (C) 2022 APITable Ltd. <https://apitable.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import classNames from 'classnames';
import { stopPropagation, useListenVisualHeight } from '../../helper';
import React, { useCallback, useEffect, useRef, useState } from 'react';
import { ListSearch } from './list_search.ignore';
import { FootWrapper, ResultSpan, StyledListItem, StyledListWrapper, WrapperDiv } from './styled';
import { useListInteractive } from './use_list_interactive';
import styled from 'styled-components';
export const ListDeprecate = (props) => {
    const { children, noDataTip = 'empty data', activeIndex: DraftActiveIndex, footerComponent, onClick, className, searchProps, triggerInfo, autoHeight = false } = props;
    const [keyword, setKeyword] = useState('');
    const containerRef = useRef(null);
    const listRef = useRef(null);
    const childrenCount = React.Children.count(children);
    const { setActiveIndex, activeIndex } = useListInteractive({
        activeItemClass: 'hoverBg',
        listLength: childrenCount,
        containerRef: containerRef,
        listContainerRef: listRef,
    });
    const { style } = useListenVisualHeight({
        listenNode: containerRef,
        childNode: listRef,
        triggerInfo,
        maxHeight: 300,
        minHeight: 30,
        position: 'relative-absolute',
    });
    useEffect(() => {
        if (DraftActiveIndex == null) {
            return;
        }
        setActiveIndex(DraftActiveIndex);
    }, [DraftActiveIndex, setActiveIndex]);
    const clearStatus = useCallback(() => {
        setKeyword('');
        setActiveIndex(-1);
    }, [setKeyword, setActiveIndex]);
    useEffect(() => {
        clearStatus();
    }, [setActiveIndex, clearStatus]);
    useEffect(() => {
        setActiveIndex(-1);
    }, [keyword, childrenCount, setActiveIndex]);
    const cloneChild = () => {
        return React.Children.map(children, (item) => {
            const props = item === null || item === void 0 ? void 0 : item['props'];
            if (!React.isValidElement(item)) {
                return item;
            }
            const child = item;
            const cloneSelf = () => {
                return React.cloneElement(child, {
                    onMouseOver: (e) => {
                        props.onMouseOver && props.onMouseOver(e);
                        // onHoverListItem(e);
                    },
                    onMouseOut: (e) => {
                        props.onMouseOut && props.onMouseOut(e);
                        // onOutListItem(e);
                    },
                    onClick(e) {
                        if (child.props.disabled) {
                            return;
                        }
                        onClick(e, child.props.currentIndex);
                        if (!searchProps) {
                            return;
                        }
                        searchProps.inputRef && searchProps.inputRef.current && searchProps.inputRef.current.focus();
                    },
                    className: classNames({
                        hoverBg: activeIndex === child.props.currentIndex,
                    }, child.props.className),
                });
            };
            // console.log('000', child);
            // if (
            //   ((child.type as any)['name'] && (child.type as any)['name'] === "Item") ||
            //   ((child.type as any)['displayName'] && (child.type as any)['displayName'] === "Styled(Item)")
            // ) {
            //   console.log('123');
            //   return child.props.wrapperComponent ? child.props.wrapperComponent(cloneSelf()) : cloneSelf();
            // }
            return cloneSelf();
        });
    };
    const childs = cloneChild();
    const keydownForContainer = (e) => {
        if (e.keyCode !== 13) {
            return;
        }
        stopPropagation(e);
        if (activeIndex < 0) {
            return;
        }
        const { props: { disabled } } = childs === null || childs === void 0 ? void 0 : childs[activeIndex];
        if (disabled) {
            return;
        }
        onClick(null, activeIndex);
    };
    const showNoDataTip = Boolean(!keyword.length && !childrenCount);
    const blackTip = typeof noDataTip === 'function' ? noDataTip() : noDataTip;
    const showNoSearchResult = Boolean(keyword.length && !childrenCount);
    return React.createElement(WrapperDiv, { ref: containerRef, tabIndex: 0, onKeyDown: keydownForContainer, className: className },
        searchProps && React.createElement(ListSearch, Object.assign({ setKeyword: setKeyword, keyword: keyword }, searchProps)),
        (showNoDataTip || showNoSearchResult) && React.createElement(ResultSpan, null, blackTip),
        Boolean(childrenCount) && React.createElement(StyledListWrapper, { ref: listRef, style: autoHeight ? style : undefined }, childs),
        footerComponent && Boolean(footerComponent()) &&
            React.createElement(FootWrapper, { onClick: clearStatus }, footerComponent()));
};
const StyledDiv = styled.div `
  width: 100%;
  
  &:focus-visible {
    outline: none;    
  }
`;
// FIXME: line color
export const ListDeprecateItem = React.forwardRef((props) => {
    const { currentIndex, selected, children, setRef, className, active } = props, rest = __rest(props, ["currentIndex", "selected", "children", "setRef", "className", "active"]);
    return React.createElement(StyledListItem, { "data-tab-index": currentIndex, active: active, selected: selected, className: className, variant: 'body2' },
        React.createElement(StyledDiv, Object.assign({ style: {
                width: '100%'
            }, role: 'option', ref: setRef }, rest), children));
});
// @ts-ignore
ListDeprecate.Item = ListDeprecateItem;
