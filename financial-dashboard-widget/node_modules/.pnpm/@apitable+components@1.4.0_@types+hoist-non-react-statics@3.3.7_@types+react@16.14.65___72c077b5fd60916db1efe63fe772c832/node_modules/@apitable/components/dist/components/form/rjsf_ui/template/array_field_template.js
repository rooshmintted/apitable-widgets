/**
 * APITable <https://github.com/apitable/apitable>
 * Copyright (C) 2022 APITable Ltd. <https://apitable.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import { ArrowDownOutlined, ArrowUpOutlined, DeleteOutlined } from '@apitable/icons';
import { Button } from '../../../../components/button';
import { IconButton } from '../../../../components/icon_button';
import React from 'react';
import styled from 'styled-components';
const InlineArrayItem = styled.div `
  display: flex;
  align-items: center;
`;
const ArrayFieldItem = (props) => {
    const isUpDisable = props.disabled || props.readonly || !props.hasMoveUp;
    const isDownDisable = props.disabled || props.readonly || !props.hasMoveDown;
    return (React.createElement(InlineArrayItem, null,
        props.children,
        props.hasToolbar && (React.createElement(React.Fragment, null,
            (props.hasMoveUp || props.hasMoveDown) && (React.createElement(IconButton, { disabled: isUpDisable, size: "small", onClick: props.onReorderClick(props.index, props.index - 1), icon: ArrowUpOutlined })),
            (props.hasMoveUp || props.hasMoveDown) && (React.createElement(IconButton, { disabled: isDownDisable, onClick: props.onReorderClick(props.index, props.index + 1), icon: ArrowDownOutlined })),
            props.hasRemove && (React.createElement(IconButton, { disabled: props.disabled || props.readonly, onClick: props.onDropIndexClick(props.index), icon: DeleteOutlined }))))));
};
export const ArrayFieldTemplate = (props) => {
    // const orderable = (getUiOptions(props.uiSchema) || {}).orderable as boolean;
    // // const removable = (getUiOptions(props.uiSchema) || {}).removable as boolean;
    var _a;
    // const SortableItem = SortableElement(({ element }: { element: any }) => (
    //   <div style={{ display: 'flex' }}>
    //     <DragOutlined /><ArrayFieldItem {...element} />
    //   </div>
    // ));
    // const SortableItems = SortableContainer(({ items }: { items: IArrayFieldItem[] }) => {
    //   return (
    //     <>
    //       {props.items.map((element, index) => (
    //         <SortableItem key={element.key} index={index} element={element} />
    //       ))}
    //     </>
    //   );
    // });
    // const onSortEnd = ({ oldIndex, newIndex }: { oldIndex: number, newIndex: number }) => {
    //   console.log({ oldIndex, newIndex });
    //   props.items[oldIndex].onReorderClick(oldIndex, newIndex);
    // };
    // if (orderable) {
    //   return (
    //     <div>
    //       <SortableItems items={props.items} onSortEnd={onSortEnd} />
    //       {props.canAdd && (
    //         <div>
    //           <Button onClick={props.onAddClick} size="small" >+ New</Button>
    //         </div>
    //       )}
    //     </div>
    //   )
    // }
    const { schema, uiSchema, items, onAddClick } = props;
    const { maxItems, minItems } = schema;
    const addable = (_a = uiSchema.addable) !== null && _a !== void 0 ? _a : (maxItems ? items.length < maxItems : true);
    const hasRemove = minItems ? items.length > minItems : true;
    return (React.createElement("div", null,
        items.map(element => React.createElement(ArrayFieldItem, Object.assign({}, element, { hasRemove: hasRemove }))),
        addable && (React.createElement("div", null,
            React.createElement(Button, { onClick: onAddClick, size: "small" }, "+ New")))));
};
