/**
 * APITable <https://github.com/apitable/apitable>
 * Copyright (C) 2022 APITable Ltd. <https://apitable.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import { BasicValueType, IField, StatType, IEffectOption } from '../core';
import { IWidgetContext, IFormatType, FieldType, IPermissionResult, IPropertyInView } from '../interface';
import { Record } from './record';
/**
 * @hidden
 * Enterprise Wecom compatibility judgment,
 * three-party applications do not support the display of member fields.
 * @param type
 * @returns
 */
export declare const showField: (type: FieldType) => boolean;
/**
 * Number datasheet column operations and information.
 *
 * To manipulate the number datasheet columns,
 * you can use {@link useField} (single column information),
 * {@link useFields} (multiple column information).
 */
export declare class Field {
    datasheetId: string;
    private wCtx;
    fieldData: IField;
    private fieldEntity;
    /**
     * @hidden
     */
    constructor(datasheetId: string, wCtx: IWidgetContext, fieldData: IField);
    /**
     * Checks whether the current user has permission to perform the given field update.
     */
    private checkPermissionUpdateField;
    /**
     * The ID for this model.
     * @returns
     *
     * #### Example
     * ```js
     * console.log(myField.id);
     * // => 'fld1234567'
     * ```
     */
    get id(): string;
    /**
     * The name of the field. Can be watched.
     *
     * @returns
     *
     * #### Example
     * ```js
     * console.log(myField.name);
     * // => 'Name'
     * ```
     */
    get name(): string;
    /**
     * The type of the field. Can be watched. {@link FieldType}
     *
     * @returns
     *
     * #### Example
     * ```js
     * console.log(myField.type);
     * // => 'SingleLineText'
     * ```
     */
    get type(): FieldType;
    /**
     * The description of the field, if it has one. Can be watched.
     *
     * @returns
     *
     * #### Example
     * ```js
     * console.log(myField.description);
     * // => 'This is my field'
     * ```
     */
    get description(): string | null;
    /**
     *
     * The configuration property of the field.
     * The structure of the field's property depend on the field's type.
     * null if the field has no property. Can be watched.
     * Refer to {@link FieldType}.
     *
     * @return {@link FieldType}
     *
     * #### Example
     * ```js
     * import { FieldType } from '@apitable/widget-sdk';
     *
     * if (myField.type === FieldType.Currency) {
     *     console.log(myField.options.symbol);
     *     // => 'ï¿¥'
     * }
     * ```
     */
    get property(): any;
    /**
     * true if this field is computed, false otherwise.
     * A field is "computed" if it's value is not set by user input (e.g. autoNumber, magic lookup,  magic formula, etc.). Can be watched
     *
     * @returns
     *
     * #### Example
     * ```js
     * console.log(mySingleLineTextField.isComputed);
     * // => false
     * console.log(myAutoNumberField.isComputed);
     * // => true
     * ```
     */
    get isComputed(): boolean;
    /**
     * TODO: Leave for compatibility, subsequent deletion
     * @hidden
     * true if this field is its parent table's primary field, false otherwise.
     * Should never change because the primary field of a datasheet cannot change.
     * @returns
     */
    get isPrimaryField(): boolean;
    /**
     * true if this field is its parent table's primary field, false otherwise.
     * Should never change because the primary field of a datasheet cannot change.
     * @returns
     */
    get isPrimary(): boolean;
    /**
     * Is the magic form required.
     */
    get required(): boolean | null;
    /**
     * Get the current view feature properties, such as whether the field is hidden in a view
     *
     * @param viewId the view ID
     * @return
     *
     * #### Example
     * ``` js
     * const propertyInView = field.getPropertyInView('viwxxxxx');
     * console.log(propertyInView?.hidden)
     * ```
     */
    getPropertyInView(viewId: string): IPropertyInView | null;
    /**
     * Updates the description for this field.
     *
     * Throws an error if the user does not have permission to update the field, or if an invalid description is provided.
     *
     * @param description new description for the field
     * @returns
     *
     * #### Example
     * ```js
     *  field.updateDescription('this is a new description')
     * ```
     */
    updateDescription(description: string | null): Promise<void>;
    /**
     *
     * Beta API, future changes are possible.
     *
     * Updates the property for this field,
     * tips: that the update property configuration must be overwritten in full.
     *
     * Throws an error if the user does not have permission to update the field,
     * if invalid property are provided, if this field has no writable property, or if updates to this field type is not supported.
     *
     * Refer to {@link FieldType} for supported field types, the write format for property, and other specifics for certain field types.
     *
     * @param property new property for the field.
     * @param options optional options to affect the behavior of the update.
     * @returns
     *
     * #### Example
     * ```js
     * function addOptionToSelectField(selectField, nameForNewOption) {
     *     const updatedOptions = {
     *         options: [
     *             ...selectField.options,
     *             {name: nameForNewOption},
     *         ]
     *     };
     *
     *     if (selectField.hasPermissionToUpdateOptions(updatedOptions)) {
     *         selectField.updateProperty(updatedOptions);
     *     }
     * }
     * ```
     */
    updateProperty(property: any, options?: IEffectOption): Promise<void>;
    /**
     *
     * Checks whether the current user has permission to perform the given description update.
     *
     * @param description new description for the field, Length limit 200.
     * @returns
     *
     * #### Example
     * ``` js
     * const canUpdateFieldDescription = field.hasPermissionForUpdateDescription();
     * if (!canUpdateFieldDescription) {
     *   alert('not allowed!');
     * }
     * ```
     */
    hasPermissionForUpdateDescription(description?: string): boolean;
    /**
     *
     * Check whether the current user has permission to perform the given option update.
     *
     * Property about the update write format, refer to {@link FieldType}.
     *
     * @param property  new property for the field.
     * @returns
     *
     * #### Example
     * ``` js
     * const canUpdateFieldProperty = field.hasPermissionForUpdateProperty();
     * if (!canUpdateFieldProperty) {
     *   alert('not allowed!');
     * }
     * ```
     */
    hasPermissionForUpdateProperty(property?: any): boolean;
    /**
     * Check whether the current user has permission to perform the given option update.
     *
     * @param property new property for the field.
     * @returns
     *
     *
     * #### Description
     * Accepts partial input, in the same format as {@link updateProperty}.
     *
     * property about the update write format, refer to {@link FieldType}.
     *
     * Returns `{acceptable: true}` if the current user can update the specified property.
     *
     * Returns `{acceptable: false, message: string}` if no permission to operate, message may be used to display an error message to the user.
     *
     * #### Example
     * ```js
     * // Check whether the current user has permission to perform the given property update,
     * // when the update is accompanied by a write, it can also be verified at the same time.
     * const updatePropertyCheckResult = field.checkPermissionForUpdateProperty({
     *   defaultValue: '1',
     * });
     * if (!updatePropertyCheckResult.acceptable) {
     *   alert(updatePropertyCheckResult.message);
     * }
     *
     * // Check if user could potentially update a property.
     * // Use when you don't know the specific a property you want to update yet (for example,
     * // to show or hide UI controls that let you start update a property.)
     * const updatePropertyCheckResult =
     *   field.checkPermissionForUpdateProperty();
     * ```
     */
    checkPermissionForUpdateProperty(property?: any): IPermissionResult;
    /**
     * @hidden
     * For fields that are not lookup, entityType === type.
     */
    get entityType(): FieldType;
    /**
     * @hidden
     * Base type of field values.
     */
    get basicValueType(): BasicValueType;
    /**
     * @hidden
     * Some fields have formatting, get the formatting type.
     */
    get formatType(): IFormatType;
    /**
     * @hidden
     * Attempts to convert data of string type to when compatible with the data type of the current field.
     *
     * If it is not compatible, it returns null.
     *
     * @param string The string to parse.
     * #### Example
     * ```js
     * const inputString = '42';
     * const cellValue = myNumberField.convertStringToCellValue(inputString);
     * console.log(cellValue === 42);
     * // => true
     * ```
     */
    convertStringToCellValue(string: string): any;
    /**
     * @hidden
     */
    convertCellValueToString(cv: any): string | null;
    /**
     * @hidden
     */
    getFieldResultByStatType(statType: StatType, records: Record[]): string | number | null;
    /**
     * @hidden
     */
    statType2text(type: StatType): string;
    /**
     * @hidden
     */
    get statTypeList(): StatType[];
}
//# sourceMappingURL=field.d.ts.map