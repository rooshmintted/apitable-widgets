/**
 * APITable <https://github.com/apitable/apitable>
 * Copyright (C) 2022 APITable Ltd. <https://apitable.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { Loading } from '../../components';
import React from 'react';
import { ButtonBase, IconSpanStyled, TextSpanStyled } from './styled';
import { getCurrentColorIcon } from '../../helper';
export const Button = React.forwardRef((_a, ref) => {
    var { children, size = 'middle', variant = 'fill', loading = false, suffixIcon, prefixIcon, color = 'default', disabled, block, htmlType = 'button' } = _a, restProps = __rest(_a, ["children", "size", "variant", "loading", "suffixIcon", "prefixIcon", "color", "disabled", "block", "htmlType"]);
    const PrefixIcon = getCurrentColorIcon(prefixIcon);
    const SuffixIcon = getCurrentColorIcon(suffixIcon);
    return (React.createElement(ButtonBase, Object.assign({ ref: ref, size: size, btnColor: color, variant: variant, disabled: loading ? true : disabled, block: block, type: htmlType }, restProps),
        loading && (React.createElement("span", { className: "loading" },
            React.createElement(Loading, { currentColor: true, strokeWidth: 1 }))),
        prefixIcon && (React.createElement(IconSpanStyled, { existIcon: Boolean(prefixIcon), position: 'prefix', size: size }, PrefixIcon)),
        React.createElement(TextSpanStyled, null, children),
        suffixIcon && (React.createElement(IconSpanStyled, { existIcon: Boolean(suffixIcon), position: 'suffix', size: size }, SuffixIcon))));
});
