/**
 * APITable <https://github.com/apitable/apitable>
 * Copyright (C) 2022 APITable Ltd. <https://apitable.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { RadioSpanStyled, RadioInputStyled, RadioInnerStyled, RadioLabelStyled, RadioTextStyled } from './styled';
import cls from 'classnames';
import { RadioGroupContext } from './context';
export const Radio = React.forwardRef((_a, ref) => {
    var { children, name, checked, onChange, readOnly, value } = _a, restProps = __rest(_a, ["children", "name", "checked", "onChange", "readOnly", "value"]);
    const context = React.useContext(RadioGroupContext);
    const handleChange = (e) => {
        var _a;
        onChange === null || onChange === void 0 ? void 0 : onChange(e);
        (_a = context === null || context === void 0 ? void 0 : context.onChange) === null || _a === void 0 ? void 0 : _a.call(context, e);
    };
    const disabled = restProps.disabled || (context === null || context === void 0 ? void 0 : context.disabled);
    const isChecked = context.value === value;
    const isBtn = restProps.isBtn || (context === null || context === void 0 ? void 0 : context.isBtn);
    const inputProps = {
        name: name || context.name,
        checked: checked || (context.value ? isChecked : undefined),
        disabled,
        onChange: handleChange,
        readOnly,
        value
    };
    return (React.createElement(RadioLabelStyled, { ref: ref, className: cls({
            'radio-label-btn': isBtn,
            'radio-label-btn-checked': isBtn && isChecked,
            'radio-label-btn-disabled': isBtn && disabled,
        }) },
        React.createElement(RadioSpanStyled, { className: cls({
                'radio-btn': isBtn,
                'radio-checked': isChecked,
                'radio-disabled': disabled,
            }) },
            React.createElement(RadioInputStyled, Object.assign({ type: "radio" }, inputProps)),
            !isBtn && React.createElement(RadioInnerStyled, { className: "radio-inner" })),
        React.createElement(RadioTextStyled, { className: "radio-text" }, children)));
});
