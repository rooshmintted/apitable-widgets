/**
 * APITable <https://github.com/apitable/apitable>
 * Copyright (C) 2022 APITable Ltd. <https://apitable.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { CloseOutlined } from '@apitable/icons';
import { useKeyPress, useUnmount } from 'ahooks';
import { Box } from '../../../components/box';
import { IconButton } from '../../../components/icon_button';
import { TextButton } from '../../../components/text_button';
import { Typography } from '../../../components/typography';
import { getScrollbarWidth, hasScrollbar, stopPropagation } from '../../../helper';
import React, { useEffect, useState } from 'react';
import { Button } from '../../button';
import { CloseIconBox, ModalContent, ModalContentWrapper, ModalHeader, ModalMask, ModalWrapper } from '../styled';
import Portal from './portal';
export const noop = () => { };
let triggerPosition = null;
const getPosition = (e) => {
    triggerPosition = {
        x: e.pageX,
        y: e.pageY,
    };
    setTimeout(() => {
        triggerPosition = null;
    }, 100);
};
export const ModalBase = (props) => {
    const { className, contentClassName, title, renderTitle, footer, visible, closable = true, onCancel = noop, onOk = noop, maskClosable = true, centered, width, zIndex, getContainer, modalRender = (child) => child, bodyStyle, destroyOnClose = true, okButtonProps, isCloseable, cancelButtonProps, } = props;
    const [displayNone, setDisplayNone] = useState(props.visible);
    useEffect(() => {
        document === null || document === void 0 ? void 0 : document.addEventListener('click', getPosition, true);
    }, []);
    const initialBodyStyle = {
        width: document.body.style.width,
        overflow: document.body.style.overflow,
    };
    const setBodyStyle = (width, overflow) => {
        document.body.style.overflow = overflow;
        document.body.style.width = width;
    };
    const handleCancel = () => __awaiter(void 0, void 0, void 0, function* () {
        if (isCloseable == null) {
            setBodyStyle(initialBodyStyle.width, initialBodyStyle.overflow);
            onCancel();
            if (!destroyOnClose) {
                setDisplayNone(true);
            }
            return;
        }
        const res = yield isCloseable();
        if (res) {
            setBodyStyle(initialBodyStyle.width, initialBodyStyle.overflow);
            onCancel();
            if (!destroyOnClose) {
                setDisplayNone(true);
            }
        }
    });
    useKeyPress('Esc', handleCancel);
    useEffect(() => {
        if (displayNone && !visible) {
            setBodyStyle(initialBodyStyle.width, initialBodyStyle.overflow);
        }
        // eslint-disable-next-line
    }, [displayNone, visible]);
    useUnmount(() => {
        setBodyStyle(initialBodyStyle.width, initialBodyStyle.overflow);
    });
    let container = document.body;
    if (getContainer) {
        if (typeof getContainer === 'function') {
            container = getContainer();
        }
        if (typeof getContainer === 'object' &&
            getContainer instanceof window.HTMLElement) {
            container = getContainer;
        }
    }
    const computedVisible = visible || displayNone;
    if (!computedVisible) {
        return null;
    }
    const DefaultButtonGroup = (React.createElement(Box, { display: 'flex', justifyContent: 'flex-end', alignItems: 'center', padding: 24 },
        React.createElement(TextButton, Object.assign({}, cancelButtonProps, { onClick: handleCancel, style: {
                height: 40,
                padding: '9px 16px'
            } }), props.cancelText || 'Cancel'),
        React.createElement("div", { style: { marginRight: 8 } }),
        React.createElement(Button, Object.assign({}, okButtonProps, { color: 'primary', onClick: onOk }), props.okText || 'Confirm')));
    const DefaultCloseIcon = (React.createElement(CloseIconBox, { onClick: handleCancel },
        React.createElement(IconButton, { icon: CloseOutlined })));
    if (hasScrollbar()) {
        setBodyStyle(`calc(100% - ${getScrollbarWidth()}px)`, 'hidden');
    }
    return (React.createElement(Portal, { getContainer: container },
        React.createElement(Box, { style: (displayNone && !visible)
                ? { display: 'none' }
                : undefined },
            React.createElement(ModalMask, { zIndex: zIndex }),
            React.createElement(ModalWrapper, { centered: centered, zIndex: zIndex, onClick: () => {
                    if (maskClosable) {
                        handleCancel();
                    }
                }, tabIndex: -1, role: 'dialog', style: {
                    transformOrigin: `
              ${triggerPosition === null || triggerPosition === void 0 ? void 0 : triggerPosition.x}px
              ${triggerPosition === null || triggerPosition === void 0 ? void 0 : triggerPosition.y}px
            `
                } },
                React.createElement(ModalContentWrapper, { centered: centered, width: width, className: className }, modalRender(React.createElement(ModalContent, { className: contentClassName, onClick: stopPropagation },
                    closable && DefaultCloseIcon,
                    renderTitle ? renderTitle : (React.createElement(React.Fragment, null, React.createElement(ModalHeader, null,
                        React.createElement(Typography, { variant: 'h6' }, title)))),
                    React.createElement(Box, { padding: '0 24px', style: bodyStyle }, props.children),
                    (footer === undefined)
                        ? DefaultButtonGroup
                        : (footer !== null) && footer)))))));
};
