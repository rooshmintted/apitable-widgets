/**
 * APITable <https://github.com/apitable/apitable>
 * Copyright (C) 2022 APITable Ltd. <https://apitable.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { createRoot } from 'react-dom/client';
import { Alert } from './alert';
export const showAlert = (config) => {
    const { duration = 0, destroyPrev = true } = config, rest = __rest(config, ["duration", "destroyPrev"]);
    if (destroyPrev) {
        const prev = document.querySelector('.funcAlert');
        prev && prev.parentNode && prev.parentNode.removeChild(prev);
    }
    const div = document.createElement('div');
    div.setAttribute('class', 'funcAlert');
    document.body.appendChild(div);
    const root = createRoot(div);
    function destroy() {
        root.unmount();
        if (div.parentNode) {
            div.parentNode.removeChild(div);
        }
    }
    function render() {
        setTimeout(() => {
            root.render((React.createElement(Alert, Object.assign({}, rest))));
        });
    }
    const start = () => {
        destroyPrev && destroy();
        render();
        if (duration !== 0) {
            setTimeout(() => {
                destroy();
            }, duration * 1000);
        }
    };
    start();
    return {
        destroy,
    };
};
