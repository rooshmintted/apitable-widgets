import React, { cloneElement, useRef, useState } from 'react';
import { FloatingArrow, arrow, useFloating, autoUpdate, offset, flip, shift, useHover, useFocus, useDismiss, useRole, useInteractions, FloatingPortal } from '@floating-ui/react';
import { Typography } from '../../typography';
import { TooltipBase } from '../tooltip';
import { useThemeColors } from '../../../hooks';
import { setIndex } from '../../dropdown';
const FloatUiTooltip = ({ content, className, placement = 'bottom', children, options, arrow: hasArrow = true }) => {
    var _a, _b, _c;
    const [isOpen, setIsOpen] = useState((_a = options === null || options === void 0 ? void 0 : options.initialVisible) !== null && _a !== void 0 ? _a : false);
    const arrowRef = useRef(null);
    const { refs, floatingStyles, context } = useFloating({
        open: isOpen,
        onOpenChange: setIsOpen,
        placement,
        whileElementsMounted: autoUpdate,
        middleware: [
            setIndex((_b = options === null || options === void 0 ? void 0 : options.zIndex) !== null && _b !== void 0 ? _b : 1002),
            offset((_c = options === null || options === void 0 ? void 0 : options.offset) !== null && _c !== void 0 ? _c : 16),
            ...(hasArrow ? ([
                arrow({
                    element: arrowRef,
                })
            ]) : []),
            flip({
                fallbackAxisSideDirection: 'start'
            }),
            shift()
        ]
    });
    const hover = useHover(context, { move: false });
    const focus = useFocus(context);
    const dismiss = useDismiss(context);
    const role = useRole(context, { role: 'tooltip' });
    const { getReferenceProps, getFloatingProps } = useInteractions([
        hover,
        focus,
        dismiss,
        role
    ]);
    const theme = useThemeColors();
    return (React.createElement(React.Fragment, null,
        cloneElement(children, Object.assign({ ref: refs.setReference }, getReferenceProps())),
        React.createElement(FloatingPortal, null, isOpen && (React.createElement(React.Fragment, null,
            hasArrow && (React.createElement("div", { ref: refs.setFloating, style: floatingStyles },
                React.createElement(FloatingArrow, { ref: arrowRef, context: context, stroke: 'none', fill: theme.bgReverseDefault }))),
            React.createElement(TooltipBase, Object.assign({ className: className, ref: refs.setFloating, style: floatingStyles }, getFloatingProps()),
                React.createElement(Typography, { variant: 'body4', color: theme.textReverseDefault }, content)))))));
};
export { FloatUiTooltip };
