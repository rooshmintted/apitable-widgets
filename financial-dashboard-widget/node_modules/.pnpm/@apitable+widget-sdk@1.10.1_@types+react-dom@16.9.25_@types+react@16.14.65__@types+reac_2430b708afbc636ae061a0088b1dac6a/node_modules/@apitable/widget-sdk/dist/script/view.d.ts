import { IViewProperty, ViewType } from '@apitable/core';
import { ISortedField, IWidgetContext } from '../interface';
import { Record } from './record';
export declare class View {
    private datasheetId;
    private wCtx;
    private viewData;
    /**
     * @hidden
     */
    constructor(datasheetId: string, wCtx: IWidgetContext, viewData: IViewProperty);
    /**
     * The unique ID of the view.
     *
     * @returns
     *
     * #### Example
     * ```js
     * console.log(myView.id);
     * // => 'viwxxxxxx'
     * ```
     */
    get id(): string;
    /**
     * The name of the view.
     *
     * @returns
     *
     * #### Example
     * ```js
     * console.log(myView.name);
     * // => 'Test View'
     * ```
     */
    get name(): string;
    /**
     * The type of the view.
     *
     * @returns
     *
     * #### Example
     * ```js
     * console.log(myView.type);
     * // => 1
     * ```
     */
    get type(): ViewType.Grid | ViewType.Kanban | ViewType.Gallery | ViewType.Calendar | ViewType.Gantt | ViewType.OrgChart;
    /**
     * The url of the view.
     *
     * @returns
     *
     * #### Example
     * ```js
     * console.log(myView.url);
     * ```
     */
    get url(): string;
    /**
     * Get the specified record in the view.
     *
     * @param recordId The ID of the record.
     *
     * @returns
     *
     * #### Example
     * ```js
     * console.log(myView.getRecordAsync('recxxxxxx')); // => Record
     * ```
     */
    getRecordAsync(recordId: string): Record;
    /**
     * Batch get the records in the view.
     *
     * @param options.recordIds List of record IDs.
     *
     * @param options.sorts Which fields the records need to be sorted by.
     *
     * @returns
     *
     * #### Example
     * ```js
     * console.log(myView.getRecordsAsync()); // => [Record, Record, ...]
     * console.log(myView.getRecordsAsync({ recordIds: ['recxxxxxx01', 'recxxxxxx02'] })); // => [Record, Record]
     * ```
     */
    getRecordsAsync(options?: {
        recordIds?: string[];
        sorts?: ISortedField[];
    }): Record[];
}
//# sourceMappingURL=view.d.ts.map