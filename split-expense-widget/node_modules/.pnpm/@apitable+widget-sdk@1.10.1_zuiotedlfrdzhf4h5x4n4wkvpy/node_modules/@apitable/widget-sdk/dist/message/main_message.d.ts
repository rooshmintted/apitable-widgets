import { ICollaCommandExecuteResult, ICollaCommandOptions } from '../core';
import { IExpandRecordProps, IWidgetConfigIframe, IWidgetConfigIframePartial } from '../interface';
import { AnyAction } from 'redux';
import { IInitData, ISubscribeView, IFetchDatasheet } from './interface';
import { MessageType, IContentWindow, MouseListenerType, ConnectStatus } from './protocol';
interface IWidget {
    /** Widget connection status */
    connect: ConnectStatus;
    /** Manage widget view cache subscriptions */
    subscribeViews: ISubscribeView[];
    /** bind datasheet ID */
    bindDatasheetId: string;
}
/**
 * Manage sending messages for the main thread.
 */
declare class MainMessage {
    origin: string;
    /**
     * Widget Map loaded by the main thread, managing connection status and
     * view calculation subscriptions.
     * key => widgetId
     */
    widgets: Map<string, IWidget>;
    private messageBridge;
    constructor();
    /**
     * Wraps the emit parameter with the current form identifier.
     * @param data
     */
    private wrapEmitData;
    /**
     * Change connect status.
     */
    changeConnectStatus(widgetId: string, status: ConnectStatus): void;
    /**
     * @param widgetId
     * @returns
     */
    getConnectStatus(widgetId: string): ConnectStatus | undefined;
    /**
     * Set widget window
     * @param widgetId
     * @param window
     * @returns
     */
    initWidgetWindow(widgetId: string, window: IContentWindow, bindDatasheetId: string): void;
    /**
     * Send messages.
     * @param widgetId
     * @param type
     * @param data
     */
    emit(widgetId: string, type: MessageType, data?: any, messageId?: string): void;
    /**
     * Broadcast messages.
     * @param type
     * @param data
     */
    emitBroadcast(type: MessageType, data?: any): void;
    /**
     * Receiving messages.
     * @param widgetId
     * @param type
     * @param callback
     */
    on(widgetId: string, type: MessageType, callback: (data: any, messageId?: string) => void): void;
    /**
     * Clear the relevant data when the widget is uninstalled.
     * @param widgetId
     */
    unMounted(widgetId: string): void;
    /**
     * Remove the message listener, clear the entire message type listener without specifying the window listener.
     * @param widgetId
     * @param type message type
     * @param key window ID
     */
    removeListenEvent(widgetId: string, type: MessageType): void;
    /**
     * Get the view of all widget in the main thread or a subscribed widget.
     * @param widgetId
     */
    subscribeViews(widgetId?: string): ISubscribeView[];
    /**
     * Receive connect a widget.
     * @param widgetId
     * @param callback
     * @param window
     */
    onConnectWidget(widgetId: string, callback: (status: ConnectStatus) => void): void;
    /**
     * Listening to widget initialization and sending the initialization data required by the widget.
     * @param callback
     */
    initWidget(widgetId: string, data: IInitData): void;
    /**
     * Sync widget config.
     * @param widgetId
     * @param config
     */
    syncWidgetConfig(widgetId: string, config: IWidgetConfigIframe): void;
    /**
     * @param widgetId
     */
    refreshWidget(widgetId: string): void;
    /**
     * Listening for widget config sync from widgets.
     * @param widgetId
     * @param callback
     */
    onWidgetConfig(widgetId: string, callback: (res: IWidgetConfigIframePartial) => void): void;
    /**
     * Listen to the cmd from the widget synced to the application.
     */
    onSyncCmdOptions(widgetId: string, callback: (res: ICollaCommandOptions) => void): void;
    /**
     * Synchronize the results of the main application application cmd.
     */
    syncCmdOptionsResult(widgetId: string, cmdOptionsResult: ICollaCommandExecuteResult<any>): void;
    /**
     * Synchronized RecordPicker selection results.
     */
    syncRecordPickerResult(widgetId: string, recordIds: string[], messageId?: string): void;
    /**
     * Listening for expand card requests from the widget.
     */
    onExpandRecord(widgetId: string, callback: (expandRecordParams: IExpandRecordProps) => void): void;
    /**
     * Listens for requests to expand the record selector from the widget.
     */
    onExpandRecordPicker(widgetId: string, callback: (datasheetId: string, messageId?: string) => void): void;
    /**
     * Mouse in and mouse out widgets iframe.
     */
    onMouseListener(widgetId: string, callback: (type: MouseListenerType) => void): void;
    /**
     * Enter developer mode.
     */
    onExpandDevConfig(widgetId: string, callback: () => void): void;
    /**
     * Broadcast action.
     * @param action
     */
    syncActionBroadcast(action: AnyAction): void;
    /**
     * Synchronize the action to the specified widget.
     * @param widgetId
     * @param action
     */
    syncAction(widgetId: string, action: AnyAction, messageId?: string): void;
    onFetchDatasheet(widgetId: string, callback: (fetchDatasheet: IFetchDatasheet, messageId?: string) => void): void;
    /**
     * Synchronizing view subscription data.
     * @param widgetId
     * @param callback Pick out the new subscriptions, the user determines if there is currently a view-derived cache,
     * and if not, go to dispatch to trigger the computation.
     */
    onSyncWidgetSubscribeView(widgetId: string, callback: (subscribeViews: ISubscribeView[]) => void): void;
}
export declare const mainMessage: MainMessage;
export {};
//# sourceMappingURL=main_message.d.ts.map