import debounce from 'lodash/debounce';
import React, { forwardRef, useRef } from 'react';
import styled, { css } from 'styled-components';
import { ListDropdown } from './dropdown/list_dropdown';
import { ListDeprecate } from '../list_deprecate';
import { OptionItem } from './dropdown';
import { applyDefaultTheme } from '../../theme';
const StyledListContainer = styled.div.attrs(applyDefaultTheme) `
  width: ${(props) => props.width};
  min-width: ${(props) => props.minWidth};
  padding: 4px 0;
  ${props => css `
    background-color: ${props.theme.color.highestBg};
    box-shadow: ${props.theme.color.shadowCommonHighest};
  `}
  border-radius: 4px;
`;
export const optionsFilter = (item, keyword) => {
    if (!item) {
        return false;
    }
    if (keyword && item.label) {
        return item.label.toUpperCase().includes(keyword.toUpperCase());
    }
    return true;
};
export const SearchSelect = forwardRef(({ list, clazz, disabled = false, onChange, options, children, value }, ref) => {
    const [keyword, setKeyword] = React.useState('');
    const setKeywordDebounce = debounce(setKeyword, 300);
    const afterFilterOptions = list.filter(item => optionsFilter(item, keyword));
    const findIndex = afterFilterOptions.findIndex(item => (item === null || item === void 0 ? void 0 : item.value) === value);
    const inputOnChange = (_e, keyword) => {
        setKeywordDebounce(keyword);
    };
    const inputRef = useRef(null);
    return (React.createElement(ListDropdown, { ref: ref, onVisibleChange: () => {
            setKeyword('');
        }, options: {
            arrow: false,
            selectedIndex: findIndex,
            disabled: disabled,
            offset: 4,
            zIndex: 1200,
            autoWidth: true,
        }, trigger: children }, ({ toggle }) => {
        var _a;
        return (React.createElement(StyledListContainer, { width: 'auto', minWidth: (_a = options === null || options === void 0 ? void 0 : options.minWidth) !== null && _a !== void 0 ? _a : 'auto' },
            React.createElement(ListDeprecate, { noDataTip: options === null || options === void 0 ? void 0 : options.noDataText, onClick: (_e, index) => {
                    toggle();
                    onChange === null || onChange === void 0 ? void 0 : onChange(afterFilterOptions[index]);
                }, searchProps: (options === null || options === void 0 ? void 0 : options.searchEnabled) == true ? {
                    inputRef: inputRef,
                    onSearchChange: inputOnChange,
                    placeholder: options === null || options === void 0 ? void 0 : options.placeholder,
                } : undefined, autoHeight: true }, afterFilterOptions.map((item, index) => (React.createElement(OptionItem, { className: clazz === null || clazz === void 0 ? void 0 : clazz.item, iconClassName: clazz === null || clazz === void 0 ? void 0 : clazz.icon, key: item.value, onClick: () => {
                    toggle();
                    onChange === null || onChange === void 0 ? void 0 : onChange(item);
                }, item: item, currentIndex: index, keyword: keyword, value: value }))))));
    }));
});
