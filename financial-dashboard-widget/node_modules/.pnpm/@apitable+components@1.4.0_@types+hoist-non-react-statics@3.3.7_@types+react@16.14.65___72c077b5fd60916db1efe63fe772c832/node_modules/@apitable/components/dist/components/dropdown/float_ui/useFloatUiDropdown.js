import { arrow, autoUpdate, flip, offset, shift, size, useFloating } from '@floating-ui/react';
const DROP_DOWN_OFFSET = 11;
export const setIndex = (zIndex) => {
    return {
        name: 'setIndexPlugin',
        fn(state) {
            Object.assign(state.elements.floating.style, {
                zIndex: zIndex,
            });
            return {};
        },
    };
};
const CONST_INITIAL_DROPDOWN_INDEX = 1002;
export const useFloatUiDropdown = (options) => {
    var _a, _b, _c, _d, _e, _f;
    const { isOpen, setOpen } = options;
    const hasArrow = (_a = options.arrow) !== null && _a !== void 0 ? _a : true;
    const offsetParameter = hasArrow ? DROP_DOWN_OFFSET : 4;
    const arrowEnabled = (_b = options.arrow) !== null && _b !== void 0 ? _b : true;
    const { refs, floatingStyles, context } = useFloating({
        open: isOpen,
        onOpenChange: setOpen,
        placement: (_c = options === null || options === void 0 ? void 0 : options.placement) !== null && _c !== void 0 ? _c : 'bottom',
        middleware: [
            setIndex((_d = options === null || options === void 0 ? void 0 : options.zIndex) !== null && _d !== void 0 ? _d : CONST_INITIAL_DROPDOWN_INDEX),
            ...((options === null || options === void 0 ? void 0 : options.autoWidth) === true ? [
                size({
                    apply({ rects, elements }) {
                        Object.assign(elements.floating.style, {
                            width: `${rects.reference.width}px`,
                        });
                    },
                })
            ] : []),
            offset((_e = options === null || options === void 0 ? void 0 : options.offset) !== null && _e !== void 0 ? _e : offsetParameter),
            flip({ fallbackAxisSideDirection: 'end' }),
            ...(arrowEnabled ? [
                arrow({
                    element: options.arrowRef,
                })
            ] : []),
            shift()
        ].concat((_f = options === null || options === void 0 ? void 0 : options.middleware) !== null && _f !== void 0 ? _f : []),
        whileElementsMounted: autoUpdate
    });
    return { refs, floatingStyles, context };
};
