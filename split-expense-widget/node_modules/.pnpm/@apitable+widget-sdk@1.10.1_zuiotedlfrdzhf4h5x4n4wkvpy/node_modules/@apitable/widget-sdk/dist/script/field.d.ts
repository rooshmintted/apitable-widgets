import { IField, IOpenFieldProperty, IEffectOption } from '../core';
import { IWidgetContext, FieldType } from '../interface';
/**
 * Field operations and information collections for datasheet
 */
export declare class Field {
    private datasheetId;
    private wCtx;
    private fieldData;
    private modelField;
    /**
     * @hidden
     */
    constructor(datasheetId: string, wCtx: IWidgetContext, fieldData: IField);
    /**
     * Field id, unique identification of the field
     * @returns
     *
     * #### Example
     * ```js
     * console.log(myField.id); // => 'fldxxxxxx'
     * ```
     */
    get id(): string;
    /**
     * Field name, different field names are called non-repeating values
     *
     * @returns
     *
     * #### Example
     * ```js
     * console.log(myField.name); // => 'FieldName'
     * ```
     */
    get name(): string;
    /**
     * Field types, which are enumerated values, can be found in {@link FieldType}
     *
     * @returns
     *
     * #### Example
     * ```js
     * console.log(myField.type); // => 'SingleLineText'
     * ```
     */
    get type(): FieldType;
    /**
     * Returns the description of the field
     *
     * @returns
     *
     * #### Example
     * ```js
     * console.log(myField.description);
     * // => 'This is my field'
     * ```
     */
    get description(): string | null;
    /**
     *
     * Returns the property of the field, which is different for different types of fields
     * Returns null means that the field has no properties configured
     * Refer to {@link FieldType}
     *
     * @return {@link FieldType}
     *
     * #### Example
     * ```js
     * console.log(myField.property.symbol); // => 'ï¿¥'
     * ```
     */
    get property(): IOpenFieldProperty | null;
    /**
     * Determine if the current field is a "computed field"
     * "Computed fields" means the types of fields that do not allow the user to actively write values.
     * (e.g., auto number, formula, link, modification time, creation time, modifier, creator)
     *
     * @returns
     *
     * #### Example
     * ```js
     * console.log(mySingleLineTextField.isComputed);
     * // => false
     * console.log(myAutoNumberField.isComputed);
     * // => true
     * ```
     */
    get isComputed(): boolean;
    /**
     * Returns whether the current field belongs to the primary field, which in datasheet is always the field where the first field is located.
     *
     * @returns
     *
     * #### Example
     * ```js
     * console.log(myField.isPrimary); // => true
     * ```
     */
    get isPrimary(): boolean;
    /**
     * Update the description of the field.
     *
     * Throws an error if the user does not have permission to update the field, or if an invalid description is provided.
     *
     * @param description new description for the field
     * @returns
     *
     * #### Example
     * ```js
     *  await field.updateDescriptionAsync('this is a new description')
     * ```
     */
    updateDescriptionAsync(description: string | null): Promise<void>;
    /**
     *
     * Updates the property for this field,
     * tips: that the update property configuration must be overwritten in full.
     *
     * Throws an error if the user does not have permission to update the field,
     * if invalid property are provided, if this field has no writable property, or if updates to this field type is not supported.
     *
     * Refer to {@link FieldType} for supported field types, the write format for property, and other specifics for certain field types.
     *
     * @param property new property for the field.
     * @param options optional options to affect the behavior of the update.
     * @returns
     *
     * #### Example
     * ```js
     * function addOptionToSelectField(selectField, nameForNewOption) {
     *   const updatedOptions = {
     *     options: [
     *       ...selectField.options.choices,
     *       {name: nameForNewOption},
     *     ]
     *   };
     *
     *   await selectField.updatePropertyAsync(updatedOptions);
     * }
     * ```
     */
    updatePropertyAsync(property: any, options?: IEffectOption): Promise<void>;
}
//# sourceMappingURL=field.d.ts.map