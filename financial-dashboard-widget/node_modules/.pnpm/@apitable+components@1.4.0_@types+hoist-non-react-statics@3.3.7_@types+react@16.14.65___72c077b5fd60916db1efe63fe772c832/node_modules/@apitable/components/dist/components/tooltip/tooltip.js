/**
 * APITable <https://github.com/apitable/apitable>
 * Copyright (C) 2022 APITable Ltd. <https://apitable.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import React, { useEffect, useState } from 'react';
import { Arrow, useHover, useLayer } from 'react-laag';
import styled, { createGlobalStyle, css } from 'styled-components';
import { Typography } from '../typography';
import { useProviderTheme } from '../../hooks';
import { applyDefaultTheme } from '../../theme';
const CONST_TOOLTIP_INDEX = 1201;
const GlobalStyle = createGlobalStyle `
  .tooltip {
    z-index: ${CONST_TOOLTIP_INDEX};
  }
`;
export const TooltipBase = styled.div.attrs(applyDefaultTheme) `
  ${props => {
    const color = props.theme.color;
    return css `
      z-index: ${CONST_TOOLTIP_INDEX};
      background: ${color.bgReverseDefault};
      border-radius: 4px;
      padding: 8px;
      font-size: 12px;
      line-height: 18px;
      max-width: 211px;
      color: ${props.color || color.textReverseDefault};
    `;
}}
`;
function isReactText(children) {
    return ['string', 'number'].includes(typeof children);
}
export const Tooltip = ({ children, content, placement = 'top-center', color, visible, arrow = true, trigger = 'hover', zIndex, onVisibleChange, getPopupContainer = () => document.body, style, }) => {
    const theme = useProviderTheme();
    const [isOver, hoverProps] = useHover();
    const [clickState, setClickState] = useState(false);
    const isOpen = visible != null ? visible : ((trigger === 'hover' && isOver) || (trigger === 'click' && clickState));
    const { triggerProps, layerProps, arrowProps, renderLayer } = useLayer({
        isOpen,
        triggerOffset: 12,
        auto: true,
        placement: placement,
        container: getPopupContainer
    });
    useEffect(() => {
        onVisibleChange && onVisibleChange(isOpen);
    }, [isOpen, onVisibleChange]);
    let triggerEle;
    if (isReactText(children)) {
        triggerEle = (React.createElement("span", Object.assign({ className: 'tooltip-text-wrapper' }, triggerProps, hoverProps, { onClick: () => setClickState(!clickState) }), children));
    }
    else {
        triggerEle = React.cloneElement(children, Object.assign(Object.assign(Object.assign({}, triggerProps), hoverProps), { onClick: () => setClickState(!clickState) }));
    }
    const tooltipBaseProps = Object.assign(Object.assign({}, layerProps), { style: Object.assign(Object.assign(Object.assign({}, layerProps.style), { zIndex }), style) });
    return (React.createElement(React.Fragment, null,
        triggerEle,
        isOpen &&
            renderLayer(React.createElement(TooltipBase, Object.assign({ className: 'tooltip', color: color || theme.color.textReverseDefault }, tooltipBaseProps),
                React.createElement(Typography, { variant: 'body4', color: color || theme.color.textReverseDefault }, content),
                arrow &&
                    React.createElement(Arrow, Object.assign({}, arrowProps, { backgroundColor: (style === null || style === void 0 ? void 0 : style.backgroundColor) || theme.color.bgReverseDefault, size: 8 })))),
        React.createElement(GlobalStyle, null)));
};
