/**
 * APITable <https://github.com/apitable/apitable>
 * Copyright (C) 2022 APITable Ltd. <https://apitable.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { InfoCircleFilled, WarnCircleFilled, QuestionCircleOutlined, CheckCircleFilled, WarnFilled } from '@apitable/icons';
import { Box } from '../../../components/box';
import { Button } from '../../../components/button';
import { TextButton } from '../../../components/text_button';
import React from 'react';
import { createRoot } from 'react-dom/client';
import styled, { css } from 'styled-components';
import { applyDefaultTheme } from '../../../theme';
import { ThemeProvider } from '../../../theme_provider';
import { destroyFns } from '..';
import { ModalBase, noop } from './modal_base';
export const confirm = (props) => {
    const div = document.createElement('div');
    document.body.appendChild(div);
    const root = createRoot(div);
    const close = () => {
        root.unmount();
        if (div === null || div === void 0 ? void 0 : div.parentNode) {
            div.parentNode.removeChild(div);
        }
        for (let index = 0; index < destroyFns.length; index++) {
            const fn = destroyFns[index];
            if (fn === close) {
                destroyFns.splice(index, 1);
                break;
            }
        }
    };
    destroyFns.push(close);
    const render = (props) => {
        const { content, title, onOk = noop, onCancel = noop, closable = false, okText, cancelText, icon, type, footer } = props, rest = __rest(props, ["content", "title", "onOk", "onCancel", "closable", "okText", "cancelText", "icon", "type", "footer"]);
        const handleOk = () => {
            onOk();
            close();
        };
        const handleCancel = () => {
            onCancel();
            close();
        };
        const CustomFooter = (!footer && typeof footer === 'object') ? null : (React.createElement(Box, { display: 'flex', justifyContent: 'flex-end', alignItems: 'center', padding: 24 },
            type === 'confirm' && (React.createElement(React.Fragment, null,
                React.createElement(TextButton, Object.assign({}, props.cancelButtonProps, { onClick: handleCancel, style: {
                        height: 40,
                        padding: '9px 16px',
                    } }), props.cancelText || 'Cancel'),
                React.createElement("div", { style: { marginRight: 8 } }))),
            React.createElement(Button, Object.assign({ color: type }, props.okButtonProps, { onClick: handleOk }), props.okText || 'Confirm')));
        root.render(React.createElement(ThemeProvider, null,
            React.createElement(ModalBase, Object.assign({ visible: true, title: (React.createElement(Box, { display: 'flex', alignItems: 'center' },
                    icon,
                    React.createElement("div", { style: { marginLeft: icon ? 8 : 0 } }, title))), onOk: handleOk, onCancel: handleCancel, getContainer: div, okText: okText, cancelText: cancelText, footer: CustomFooter, 
                // closeIcon={null}
                closable: closable, zIndex: 1100, centered: true }, rest), content)));
    };
    const update = (updateProps) => {
        const newProps = Object.assign(Object.assign({}, props), updateProps);
        render(newProps);
        return {
            close,
            update,
        };
    };
    render(props);
    return {
        close,
        update,
    };
};
export const withConfirm = (props) => {
    return Object.assign({ icon: React.createElement(InfoCircleFilled, null), type: 'confirm' }, props);
};
export const withWarning = (props) => {
    return Object.assign({ icon: React.createElement(WarnFilled, null), type: 'warning' }, props);
};
const IconDanger = styled(QuestionCircleOutlined).attrs(applyDefaultTheme) `
  ${(props) => {
    const { red, } = props.theme.color;
    return css `
      fill: ${red[500]};
    `;
}}
`;
export const withDanger = (props) => {
    return Object.assign({ icon: React.createElement(IconDanger, null), type: 'danger' }, props);
};
export const withError = (props) => {
    return Object.assign({ icon: React.createElement(WarnCircleFilled, null), type: 'error' }, props);
};
export const withSuccess = (props) => {
    return Object.assign({ icon: React.createElement(CheckCircleFilled, null), type: 'success' }, props);
};
export const withInfo = (props) => {
    return Object.assign({ icon: React.createElement(QuestionCircleOutlined, null), type: 'info' }, props);
};
