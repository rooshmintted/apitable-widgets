/**
 * APITable <https://github.com/apitable/apitable>
 * Copyright (C) 2022 APITable Ltd. <https://apitable.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { useRef, useEffect, useState } from 'react';
import { FloatUiTooltip } from '../tooltip';
import { TypographyBase } from './styled';
import classNames from 'classnames';
const defaultVariantMapping = {
    h1: 'h1',
    h2: 'h2',
    h3: 'h3',
    h4: 'h4',
    h5: 'h5',
    h6: 'h6',
    h7: 'h6',
    h8: 'h6',
    h9: 'h6',
    body1: 'p',
    body2: 'p',
    body3: 'p',
    body4: 'p',
};
export const Typography = (props) => {
    const { className, component, align = 'inherit', variant = 'body1', color = '', children, ellipsis = false, tooltipsZIndex } = props, rest = __rest(props, ["className", "component", "align", "variant", "color", "children", "ellipsis", "tooltipsZIndex"]);
    const typographyRef = useRef();
    const [isWithTooltip, setIsWithTooltip] = useState(false);
    const more = Object.assign({ align, variant, color }, rest);
    const tag = component || defaultVariantMapping[variant] || 'span';
    useEffect(() => {
        if (typeof ellipsis === 'boolean' && typographyRef.current) {
            setIsWithTooltip(typographyRef.current.scrollWidth > typographyRef.current.clientWidth);
        }
    }, [typographyRef, ellipsis]);
    const getEllipsis = (ellipsis) => {
        if (!ellipsis) {
            return {};
        }
        return Object.assign({ rows: 1 }, (typeof ellipsis === 'object' ? ellipsis : null));
    };
    const { rows, tooltip } = getEllipsis(ellipsis);
    const cssTextOverflow = rows === 1;
    const cssLineClamp = rows && rows > 1;
    function isReactText(children) {
        return ['string', 'number'].includes(typeof children);
    }
    const textNode = React.createElement(TypographyBase, Object.assign({ className: classNames('typography', className), ref: typographyRef, as: tag, rows: rows, children: children, cssTextOverflow: cssTextOverflow, cssLineClamp: cssLineClamp }, more));
    if ((typeof ellipsis !== 'boolean' && ellipsis.tooltip) || isWithTooltip) {
        const content = tooltip || (isReactText(children) ? children : '');
        return (React.createElement(React.Fragment, null, Boolean(content) ?
            React.createElement(FloatUiTooltip, { content: content, options: {
                    initialVisible: false
                } }, textNode) :
            textNode));
    }
    return textNode;
};
