import { IWidgetContext } from '../interface';
/**
 * Record operations
 */
export declare class Record {
    private datasheetId;
    private wCtx;
    private recordId;
    private modelRecord;
    /**
     * @hidden
     */
    constructor(datasheetId: string, wCtx: IWidgetContext, recordId: string);
    /**
     * The unique ID of the record.
     *
     * @returns
     *
     * #### Example
     * ```js
     * console.log(myRecord.id);
     * // => 'recxxxxxx'
     */
    get id(): string;
    /**
     * The cell value of the primary field of cells.
     * The primary field is usually seen as the main field.
     *
     * @returns
     *
     * #### Example
     * ```js
     * console.log(myRecord.title);
     * // => '42'
     * ```
     */
    get title(): string | null;
    /**
     * The comment counts of the record.
     *
     * @returns
     *
     * #### Example
     * ```js
     * console.log(myRecord.commentCount); // => 10
     */
    get commentCount(): number;
    /**
     * Get the cell value of a specified cell in record.
     *
     * @param fieldId The ID of the field.
     * @returns
     *
     * #### Example
     * ```js
     * const cellValue = myRecord.getCellValue(mySingleLineTextFieldId);
     * console.log(cellValue); // => 'cell value'
     * ```
     */
    getCellValue(fieldId: string): any;
    /**
     * Get the cell value of a specified cell in record, and convert it to a string type.
     *
     * @returns
     *
     * #### Example
     * ```js
     * const stringValue = myRecord.getCellValueString(myNumberFieldId);
     * console.log(stringValue); // => '42'
     * ```
     */
    getCellValueString(fieldId: string): string | null;
    /**
     * The url of the record.
     *
     * @param viewId
     *
     * @returns
     *
     * #### Example
     * ```js
     * console.log(myRecord.getUrl('viwxxxxxx'));
     * ```
     */
    getUrl(viewId?: string): string;
}
//# sourceMappingURL=record.d.ts.map