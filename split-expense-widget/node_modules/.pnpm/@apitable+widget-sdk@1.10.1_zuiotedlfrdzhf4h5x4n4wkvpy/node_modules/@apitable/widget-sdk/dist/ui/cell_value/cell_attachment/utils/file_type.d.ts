/**
 * APITable <https://github.com/apitable/apitable>
 * Copyright (C) 2022 APITable Ltd. <https://apitable.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import { IAttachmentValue, IImageSrcOption } from '@apitable/core';
import Bowser from 'bowser';
export declare const browser: Bowser.Parser.Parser | undefined;
export declare enum FileType {
    Other = 0,
    Image = 1,
    Doc = 2,
    Pdf = 3,
    Media = 4,
    Zip = 5,
    Txt = 6
}
export declare enum DocType {
    Word = 0,
    Excel = 1,
    PPT = 2
}
export declare const NO_SUPPORT_IMG_MIME_TYPE: string[];
export declare const DOC_MIME_TYPE: string[];
interface IFileLikeProps {
    name: string;
    type: string;
}
export declare function isWhatFileType(file: IFileLikeProps): FileType;
export declare function isDocType(file: IFileLikeProps): "" | DocType;
/**
 * copy from next /image

 */
declare type StaticImageData = string | {
    src: string;
    height: number;
    width: number;
    blurDataURL?: string;
};
export declare function renderFileIconUrl(curFile: IFileLikeProps): string;
export declare function renderFileIcon(curFile: IFileLikeProps): StaticImageData;
export declare const imageSizeExceeded: (size: number) => boolean;
/**
 * Whether to display thumbnails of the original image, e.g. not after the volume exceeds 20Mb.
 */
export declare const showOriginImageThumbnail: (file: IAttachmentValue) => string | boolean;
export declare const isSupportImage: (mimeType: string) => boolean;
export declare const getCellValueThumbSrc: (file: IAttachmentValue, option: IImageSrcOption) => string;
export declare function getDownloadSrc(fileInfo: IAttachmentValue): string;
export declare function getAvInfoRequestUrl(fileInfo: IAttachmentValue): string;
export {};
//# sourceMappingURL=file_type.d.ts.map