import { ICollaCommandExecuteResult, ICollaCommandOptions } from '@apitable/core';
import { AnyAction } from 'redux';
import { IFetchDatasheet, ISubscribeView } from './interface';
import { IResponse, MessageType } from './protocol';
interface IWidget {
    /** Manage widget view cache subscriptions */
    subscribeViews: ISubscribeView[];
}
declare class EventMessage {
    widgets: Map<string, IWidget>;
    private messageBridge;
    constructor();
    emit(type: MessageType, data: any, key?: string): void;
    on(type: MessageType, callback: (data: IResponse<any>) => void, key: string): void;
    removeListenEvent(widgetId: string, type: MessageType): void;
    removeListenEventByKey(key: string): void;
    mountWidget(widgetId: string): void;
    unMounted(widgetId: string): void;
    syncAction(action: AnyAction, widgetId?: string): void;
    onSyncAction(widgetId: string, callback: (res: AnyAction, messageId?: string) => void): void;
    refreshWidget(widgetId: string): void;
    onRefreshWidget(widgetId: string, callback: (res: string) => void): void;
    subscribeViews(widgetId?: string): ISubscribeView[];
    onSyncWidgetSubscribeView(widgetId: string, callback: (subscribeViews: ISubscribeView[]) => void): void;
    syncWidgetSubscribeView(subscribeViews: ISubscribeView[], widgetId: string): void;
    fetchDatasheet(fetchDatasheet: IFetchDatasheet, widgetId: string): void;
    onFetchDatasheet(widgetId: string, callback: (fetchDatasheet: IFetchDatasheet, messageId?: string) => void): void;
    syncCmd(cmdOptions: ICollaCommandOptions, widgetId: string): Promise<ICollaCommandExecuteResult<any>>;
    onSyncCmdOptions(widgetId: string, callback: (res: ICollaCommandOptions) => void): void;
    syncCmdOptionsResult(widgetId: string, cmdOptionsResult: ICollaCommandExecuteResult<any>): void;
}
export declare const eventMessage: EventMessage;
export {};
//# sourceMappingURL=event_message.d.ts.map