import { IResponse, MessageType } from './interface';
declare type ICallBack = (res: IResponse, messageId?: string) => void;
declare type IEventMap = Map<MessageType, {
    [key: string]: ICallBack[];
}>;
/**
 * Communication protocol base class definition.
 * Define the communication method, will be eventBus,
 * postMessage two communication method inheritance.
 * emit send message
 * on receiving message
 */
export declare abstract class Protocol {
    /**
     * Communication event map.
     */
    protected eventMap: IEventMap;
    /**
     * Send the message, if it has a key, only to the window with the specified key,
     * otherwise it is broadcast to all.
     * @param type message type
     * @param data response data body
     * @param key window ID
     */
    abstract emit(type: MessageType, data: IResponse, key?: string): void;
    /**
     * Remove the message listener, clear the entire message type listener without specifying the window listener.
     * @param type message type
     * @param key window ID
     */
    removeListenEvent(type: MessageType, key?: string): void;
    /**
     * When adding a listener, you need to pass in your own form identifier to
     * facilitate receiving data from the specified form.
     * @param type message type
     * @param callback
     * @param key window key, the window identifier for the listener, is stored in the EventMap.
     * @param origin Source window, indicating that only messages window the source form will be processed,
     * or if declared, any person sending a message to this form will be processed.
     */
    on(type: MessageType, callback: (data: IResponse, messageId?: string) => void, key: string, origin?: string): void;
    /**
     * Get the callback array.
     * @param type message type
     * @param key window ID
     */
    getCallbacks(type: MessageType, key?: string): ICallBack[];
    /**
     * Remove all event listeners for the specified window ID.
     * @param key window ID
     */
    removeListenEventByKey(key: string): void;
}
export {};
//# sourceMappingURL=protocol.d.ts.map