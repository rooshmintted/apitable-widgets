/**
 * APITable <https://github.com/apitable/apitable>
 * Copyright (C) 2022 APITable Ltd. <https://apitable.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import { CSSMotionList } from 'rc-motion';
import React, { useEffect, useState } from 'react';
import { createRoot } from 'react-dom/client';
import { MessageUI } from './message_ui';
export function useRefCallback(callback) {
    const callbackRef = React.useRef(callback);
    callbackRef.current = callback;
    return React.useCallback((...args) => callbackRef.current(...args), []);
}
let seed = 0;
const now = Date.now();
const getUuid = () => {
    const id = seed;
    seed += 1;
    return `apitable-message_${now}_${id}`;
};
const MessageUiContainer = (props) => {
    const [uuids, setUuids] = useState([]);
    const [uiPropsMap, setUiPropsMap] = useState({});
    const remove = (removeKey) => {
        setUuids(uuids => uuids.filter(key => key !== removeKey));
    };
    useEffect(() => {
        if (props.messageKey && uiPropsMap.hasOwnProperty(props.messageKey)) {
            if (uuids.includes(props.messageKey)) {
                // Component is rendering, updating content
                setUiPropsMap(Object.assign(Object.assign({}, uiPropsMap), { [props.messageKey]: Object.assign(Object.assign({}, uiPropsMap[props.messageKey]), props) }));
                return;
            }
        }
        // First render
        const key = props.messageKey || getUuid();
        const newUuids = [...uuids];
        newUuids.push(key);
        setUuids(newUuids);
        setUiPropsMap(Object.assign(Object.assign({}, uiPropsMap), { [key]: Object.assign(Object.assign({}, props), { messageKey: key, onDestroy: () => remove(key) }) }));
        // eslint-disable-next-line
    }, [props]);
    return (React.createElement("div", { style: { position: 'fixed', top: '80px', textAlign: 'center', width: '100%', pointerEvents: 'none', zIndex: 1000 } },
        React.createElement(CSSMotionList, { keys: uuids, motionName: 'apitable' }, ({ key, className: motionClassName }) => React.createElement(MessageUI, Object.assign({ motionClassName: motionClassName }, uiPropsMap[key])))));
};
export const createUseMessage = () => {
    let domWrapper = null;
    return (props) => {
        if (!domWrapper) {
            const rootDom = document.createElement('div');
            document.body.appendChild(rootDom);
            domWrapper = rootDom;
        }
        const root = createRoot(domWrapper);
        root.render(React.createElement(MessageUiContainer, Object.assign({}, props, { messageKey: props.messageKey })));
    };
};
