/**
 * APITable <https://github.com/apitable/apitable>
 * Copyright (C) 2022 APITable Ltd. <https://apitable.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
export declare type Orientation = 'landscape' | 'portrait';
export declare enum ScreenSize {
    xs = "xs",
    sm = "sm",
    md = "md",
    lg = "lg",
    xl = "xl",
    xxl = "xxl",
    xxxl = "xxxl"
}
export interface IScreen<T> {
    size: keyof T;
    orientation: Orientation;
    screenIsAtLeast(breakpoint: keyof T, andOrientation?: Orientation): boolean;
    screenIsAtMost(breakpoint: keyof T, andOrientation?: Orientation): boolean;
    clientWidth: number;
    isMobile: boolean;
}
export declare const getScreen: (width: number, height: number) => IScreen<{
    [name: string]: number;
}>;
export declare const useResponsive: <T extends {
    [name: string]: number;
}>() => IScreen<T>;
//# sourceMappingURL=use_responsive.d.ts.map