/**
 * APITable <https://github.com/apitable/apitable>
 * Copyright (C) 2022 APITable Ltd. <https://apitable.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import { IFieldQuery } from '../interface';
import { Datasheet, Field } from '../model';
/**
 * Get information about all fields(columns) of currently view.
 * Rerendering is triggered when the fields property/columns order changes.
 *
 * If not viewId passed in, an empty array is returned.
 *
 * @param viewId The ID for view.
 * @param query Optional parameter that specifies which fieldId data to query.
 * @returns
 *
 * ### Example
 * ```js
 * import { useFields, useActiveViewId } from '@apitable/widget-sdk';
 *
 * // Show all field names
 * function FieldNames() {
 *   const viewId = useActiveViewId();
 *   const fields = useFields(viewId);
 *   return (<div>
 *     {fields.map(field => <p key={field.id}>{field.name}</p>)}
 *   </div>);
 * }
 * ```
 *
 */
export declare function useFields(viewId: string | undefined, query?: IFieldQuery): Field[];
/**
 * ## Support for loading the corresponding datasheet data fields.
 *
 * @param datasheet Datasheet instance, by {@link useDatasheet} get.
 * @param viewId The ID for view.
 * @param query Optional parameter that specifies which fieldId data to query.
 * @returns
 *
 * ### Example
 * ```js
 * import { useFields, useDatasheet } from '@apitable/widget-sdk';
 *
 * // Show all field names corresponding to the datasheetId(dstXXXXXXXX) datasheet
 * function FieldNames() {
 *   const datasheet = useDatasheet('dstXXXXXXXX');
 *   const fields = useFields(datasheet, 'vieXXXXXXX');
 *   return (<div>
 *     {fields.map(field => <p key={field.id}>{field.name}</p>)}
 *   </div>);
 * }
 * ```
 *
 */
export declare function useFields(datasheet: Datasheet | undefined, viewId: string | undefined, query?: IFieldQuery): Field[];
//# sourceMappingURL=use_fields.d.ts.map