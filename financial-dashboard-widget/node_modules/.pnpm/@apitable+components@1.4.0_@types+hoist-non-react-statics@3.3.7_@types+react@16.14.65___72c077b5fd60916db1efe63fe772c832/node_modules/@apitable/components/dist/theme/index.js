/**
 * APITable <https://github.com/apitable/apitable>
 * Copyright (C) 2022 APITable Ltd. <https://apitable.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { light } from './light';
import { dark } from './dark';
export * from './dark';
export * from './light';
export * from './theme.interface';
export const defaultTheme = light;
export const darkTheme = dark;
export function applyDefaultTheme(_a) {
    var { theme = {}, className } = _a, props = __rest(_a, ["theme", "className"]);
    // Since styled-components defaults the `theme` prop to an empty object
    // inside of the styled component if a ThemeProvider is not present,
    // we check against the number of keys.
    return Object.assign(Object.assign({}, props), { theme: (Object.keys(theme).length === 0 ? defaultTheme : theme) });
}
