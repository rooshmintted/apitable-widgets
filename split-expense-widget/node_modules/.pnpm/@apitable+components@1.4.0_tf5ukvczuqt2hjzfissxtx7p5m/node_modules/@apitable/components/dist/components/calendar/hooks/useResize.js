/**
 * APITable <https://github.com/apitable/apitable>
 * Copyright (C) 2022 APITable Ltd. <https://apitable.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import { useRef } from 'react';
import { isTouchEvent, isMouseEvent, resizeFormat } from '../utils';
import { Direction } from '../constants';
export const useResize = ({ height = [], width, update, setResizeDay, tasks }) => {
    const resizeRef = useRef();
    const onMouseMove = (event) => {
        var _a, _b, _c, _d, _e, _f;
        const isRight = ((_a = resizeRef.current) === null || _a === void 0 ? void 0 : _a.direction) === Direction.Right;
        const clientX = isTouchEvent(event) ? (_b = event.touches[0]) === null || _b === void 0 ? void 0 : _b.clientX : event.clientX;
        const clientY = isTouchEvent(event) ? (_c = event.touches[0]) === null || _c === void 0 ? void 0 : _c.clientY : event.clientY;
        const diffY = (clientY || 0) - (((_d = resizeRef.current) === null || _d === void 0 ? void 0 : _d.clientY) || 0);
        const diffX = (clientX || 0) - (((_e = resizeRef.current) === null || _e === void 0 ? void 0 : _e.clientX) || 0);
        const topF = (((_f = resizeRef.current) === null || _f === void 0 ? void 0 : _f.top) || 0) % height[0];
        let week = 0;
        let day = 0;
        if (isRight) {
            const bottomY = diffY + topF - height[0];
            if (diffY > 0 && bottomY > 0) {
                week = Math.ceil(bottomY / height[0]);
            }
            else {
                week = 0;
            }
            day = Math.ceil(diffX / width) + 7 * week;
        }
        else {
            const topY = -diffY - topF;
            if (diffY < 0 && topY > 0) {
                week = Math.ceil(topY / height[0]);
            }
            else {
                week = 0;
            }
            day = Math.ceil(-diffX / width) + 7 * week;
        }
        setResizeDay(day);
        resizeRef.current = Object.assign(Object.assign({}, resizeRef.current), { day });
    };
    const onResizeStart = (event, id, direction) => {
        var _a, _b;
        const parentNode = event.target.parentNode;
        let clientX = 0;
        let clientY = 0;
        if (event.nativeEvent && isMouseEvent(event.nativeEvent)) {
            clientX = event.nativeEvent.clientX;
            clientY = event.nativeEvent.clientY;
        }
        else if (event.nativeEvent && isTouchEvent(event.nativeEvent)) {
            clientX = ((_a = event.nativeEvent.touches[0]) === null || _a === void 0 ? void 0 : _a.clientX) || 0;
            clientY = ((_b = event.nativeEvent.touches[0]) === null || _b === void 0 ? void 0 : _b.clientY) || 0;
        }
        resizeRef.current = { id, clientX, clientY, direction, top: parseInt(parentNode.style.top), day: 0 };
        window.addEventListener('mousemove', onMouseMove);
        window.addEventListener('mouseup', onMouseup);
    };
    const onMouseup = () => {
        var _a, _b;
        const direction = (_a = resizeRef.current) === null || _a === void 0 ? void 0 : _a.direction;
        const day = (_b = resizeRef.current) === null || _b === void 0 ? void 0 : _b.day;
        if (day && update) {
            const task = tasks.filter(t => { var _a; return ((_a = resizeRef.current) === null || _a === void 0 ? void 0 : _a.id) === t.id; })[0];
            const { startDate, endDate } = task;
            const formatData = resizeFormat({ startDate, endDate, day, direction });
            update(task.id, formatData.startDate, formatData.endDate);
        }
        resizeRef.current = undefined;
        setResizeDay(0);
        window.removeEventListener('mousemove', onMouseMove);
        window.removeEventListener('mouseup', onMouseup);
    };
    return {
        onResizeStart,
        resizeData: resizeRef.current
    };
};
