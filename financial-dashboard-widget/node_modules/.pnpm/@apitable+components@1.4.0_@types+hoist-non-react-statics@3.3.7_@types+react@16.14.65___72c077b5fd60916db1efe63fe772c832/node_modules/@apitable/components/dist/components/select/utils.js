/**
 * APITable <https://github.com/apitable/apitable>
 * Copyright (C) 2022 APITable Ltd. <https://apitable.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { isFragment } from 'react-is';
import React from 'react';
export default function toArray(children) {
    let ret = [];
    React.Children.forEach(children, (child) => {
        if (child == null) {
            return;
        }
        if (Array.isArray(child)) {
            ret = ret.concat(toArray(child));
        }
        else if (isFragment(child) && child.props) {
            ret = ret.concat(toArray(child.props.children));
        }
        else {
            ret.push(child);
        }
    });
    return ret;
}
function convertNodeToOption(node) {
    const _a = node.props, { children, value } = _a, restProps = __rest(_a, ["children", "value"]);
    return Object.assign({ value: value, label: children }, restProps);
}
export function convertChildrenToData(nodes, optionOnly = false) {
    return toArray(nodes)
        .map((node, index) => {
        if (!React.isValidElement(node)) {
            return null;
        }
        const _a = node, { key } = _a, _b = _a.props, { children } = _b, restProps = __rest(_b, ["children"]);
        if (optionOnly) {
            return convertNodeToOption(node);
        }
        return Object.assign({ key: key == null ? index : key, label: children }, restProps);
    })
        .filter(data => data);
}
