/**
 * APITable <https://github.com/apitable/apitable>
 * Copyright (C) 2022 APITable Ltd. <https://apitable.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import React from 'react';
export interface IUseListenTriggerInfo {
    triggerSize: DOMRect;
    triggerOffset: number[];
    adjust: boolean;
}
interface IUseListenVisualHeightProps {
    listenNode: React.MutableRefObject<HTMLElement | null>;
    childNode?: React.MutableRefObject<HTMLElement | null>;
    minHeight: number;
    maxHeight: number;
    triggerInfo?: IUseListenTriggerInfo;
    containerAdjust?: boolean;
    showScrollColor?: boolean;
    showOnParent?: boolean;
    position?: 'absolute' | 'sticky' | 'fixed' | 'relative-absolute';
    useTopSpace?: boolean;
    onScroll?: (props: {
        scrollTop: number;
        height: number;
        scrollHeight: number;
    }) => void;
    subOffsetY?: number;
}
export interface IConfig {
    configMaxHeight?: number;
    configTriggerInfo?: IUseListenTriggerInfo;
}
export declare function useListenVisualHeight(props: IUseListenVisualHeightProps): {
    style: undefined;
    onListenResize: () => void;
} | {
    style: React.CSSProperties;
    onListenResize: (props?: IConfig) => void;
};
export {};
//# sourceMappingURL=use_listen_visual_height.d.ts.map