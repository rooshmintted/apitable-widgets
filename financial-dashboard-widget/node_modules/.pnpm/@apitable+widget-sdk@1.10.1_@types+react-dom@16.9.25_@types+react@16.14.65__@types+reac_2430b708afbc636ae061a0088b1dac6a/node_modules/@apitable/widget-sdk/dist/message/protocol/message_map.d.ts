declare type ResolveType = <T>(value: IResultParams<T>) => void;
declare type RejectType = (reason?: any) => void;
interface IResultParams<T> {
    success: boolean;
    data: T;
}
declare class MessageMap {
    private map;
    private timer;
    constructor(timer?: number);
    /**
     * Message callback to queue operations.
     */
    push(id: string, resolve?: ResolveType, reject?: RejectType, allowTimeout?: boolean): void;
    /**
     * The message calls back the queueing operation and
     * triggers the event related to the completion of the operation.
     */
    pop<T>(id: string, params: IResultParams<T>): void;
    /**
     * Clear message memory.
     */
    clear(): void;
    /**
     * Take out the information corresponding to the specified ID.
     */
    private put;
}
export declare const messageMap: MessageMap;
export {};
//# sourceMappingURL=message_map.d.ts.map