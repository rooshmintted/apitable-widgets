/**
 * APITable <https://github.com/apitable/apitable>
 * Copyright (C) 2022 APITable Ltd. <https://apitable.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import useMergedState from 'rc-util/lib/hooks/useMergedState';
import KeyCode from 'rc-util/lib/KeyCode';
import { SwitchInnerBase, SwitchBase, SwitchBeforeBase, SIZE_MAP } from './styled';
import { Loading } from '../../components';
import styled, { css } from 'styled-components';
import { isBoolean } from 'lodash';
const StyledSpan = styled.span `
  color: ${props => props.color};
  font-size: 16px;
  font-style: normal;
  font-weight: 600;
  line-height: 24px;
  ${props => props.active && css `
    margin-left: ${SIZE_MAP[props.size].innerSize + 2}px;
  `}
  
  ${props => !props.active && css `
    margin-right: ${SIZE_MAP[props.size].innerSize + 2}px;
  `}
`;
export const Switch = React.forwardRef((_a, ref) => {
    var { text, clazz, className, checked, defaultChecked, disabled, loadingIcon, loading, checkedChildren, unCheckedChildren, onClick, onChange, onKeyDown, size = 'default' } = _a, restProps = __rest(_a, ["text", "clazz", "className", "checked", "defaultChecked", "disabled", "loadingIcon", "loading", "checkedChildren", "unCheckedChildren", "onClick", "onChange", "onKeyDown", "size"]);
    const [innerChecked, setInnerChecked] = useMergedState(false, {
        value: checked,
        defaultValue: defaultChecked,
    });
    function triggerChange(newChecked, event) {
        let mergedChecked = innerChecked;
        if (!disabled) {
            mergedChecked = newChecked;
            setInnerChecked(mergedChecked);
            onChange && onChange(mergedChecked, event);
        }
        return mergedChecked;
    }
    function onInternalKeyDown(e) {
        if (e.keyCode === KeyCode.LEFT) {
            triggerChange(false, e);
        }
        else if (e.keyCode === KeyCode.RIGHT) {
            triggerChange(true, e);
        }
        onKeyDown && onKeyDown(e);
    }
    function onInternalClick(e) {
        const ret = triggerChange(!innerChecked, e);
        onClick && onClick(ret, e);
    }
    return (React.createElement(SwitchBase, Object.assign({}, restProps, { className: className !== null && className !== void 0 ? className : (innerChecked ? clazz === null || clazz === void 0 ? void 0 : clazz.checkedBackground : clazz === null || clazz === void 0 ? void 0 : clazz.unCheckedBackground), type: "button", role: "switch", ref: ref, onKeyDown: onInternalKeyDown, onClick: (e) => onInternalClick(e), checked: innerChecked, disabled: disabled || loading, size: size }),
        React.createElement(SwitchBeforeBase, { size: size, checked: innerChecked, className: innerChecked ? clazz === null || clazz === void 0 ? void 0 : clazz.checkedCircle : clazz === null || clazz === void 0 ? void 0 : clazz.unCheckedCircle }, loading ? (loadingIcon || React.createElement(Loading, null)) : null),
        text && innerChecked && (React.createElement(StyledSpan, { size: size, active: false, className: clazz === null || clazz === void 0 ? void 0 : clazz.checkedText }, isBoolean(text) ? innerChecked ? 'Disable' : 'Enable' : text)),
        React.createElement(SwitchInnerBase, { checked: innerChecked }, innerChecked ? checkedChildren : unCheckedChildren),
        text && !innerChecked && (React.createElement(StyledSpan, { size: size, active: true, className: clazz === null || clazz === void 0 ? void 0 : clazz.unCheckedText }, isBoolean(text) ? innerChecked ? 'Disable' : 'Enable' : text))));
});
