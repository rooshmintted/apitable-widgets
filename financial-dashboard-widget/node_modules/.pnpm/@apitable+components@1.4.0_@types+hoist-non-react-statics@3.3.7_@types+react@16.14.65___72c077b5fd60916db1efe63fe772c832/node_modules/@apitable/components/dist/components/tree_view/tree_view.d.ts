/**
 * APITable <https://github.com/apitable/apitable>
 * Copyright (C) 2022 APITable Ltd. <https://apitable.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import React, { FC } from 'react';
import { Modules } from './tree_view_context';
export declare type ExpandAction = false | 'click';
export interface ITreeViewProps {
    module: Modules;
    className?: string;
    expandedKeys?: string[];
    defaultExpandedKeys?: string[];
    selectedKeys?: string[];
    defaultSelectedKeys?: string[];
    switcherIcon?: React.ReactNode;
    switcherLoadingIcon?: React.ReactNode;
    indent?: number;
    multiple?: boolean;
    expandAction?: ExpandAction;
    draggable?: boolean;
    treeData?: any[];
    loadData?: (nodeId: string) => Promise<any>;
    onKeyDown?: (e: React.KeyboardEvent) => void;
    onSelect?: (e: React.MouseEvent, selectedKeys: string[] | string) => void;
    onFocus?: (e: React.MouseEvent, nodeId: string) => void;
    onExpand?: (nodeIds: string[]) => void;
    onRightClick?: (e: React.MouseEvent, nodeId: string) => void;
    onLoad?: () => void;
    onDragOver?: (info: any) => void;
    onDrop?: (info: any) => void;
}
export declare const TreeView: FC<React.PropsWithChildren<ITreeViewProps>>;
//# sourceMappingURL=tree_view.d.ts.map