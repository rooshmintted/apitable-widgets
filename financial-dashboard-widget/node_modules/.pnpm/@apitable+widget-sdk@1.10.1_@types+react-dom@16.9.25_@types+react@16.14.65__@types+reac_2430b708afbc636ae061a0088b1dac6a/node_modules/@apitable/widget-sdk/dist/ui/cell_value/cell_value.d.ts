/**
 * APITable <https://github.com/apitable/apitable>
 * Copyright (C) 2022 APITable Ltd. <https://apitable.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import { CSSProperties } from 'react';
/**
 * Display the UI style for recording the cells of the specified field,
 * all types of fields are now supported.
 *
 * @param props.recordId The recordId from which to render a cell.
 * @param props.fieldId The fieldId from which to render a cell.
 * @param props.cellValue The cell value to render.
 * Either record or cellValue must be provided to the CellValue. If both are provided, record will be used.
 * @param props.className Additional class names to apply to the cell renderer container, separated by spaces.
 * @param props.style Additional styles to apply to the cell renderer container.
 * @param props.cellClassName Additional class names to apply to the cell itself, separated by spaces.
 * @param props.cellStyle Additional styles to apply to the cell itself.
 * @returns
 *
 * #### Example
 *
 * **Method 1**
 *
 * Use recordId,fieldId render CellValue UI,
 * Rendering CellValue UI by recordId, fieldId, e.g. focus cell's rendering cell display UI.
 *
 * ```tsx
 * import React from 'react';
 * import { useActiveCell, CellValue } from '@apitable/widget-sdk';
 *
 * export const CellValueUI = () => {
 *   const activeCell = useActiveCell();
 *   if (!activeCell) {
 *     return <p>Cells without activation</p>
 *   }
 *  const { recordId, fieldId } = activeCell;
 *   return (
 *     <CellValue
 *       className="wrapperClass"
 *       cellClassName="cellClass"
 *       recordId={recordId}
 *       fieldId={fieldId}
 *     />
 *   )
 * }
 * ```
 *
 *  **Method 2**
 *
 * Render CellValue UI by cellValue, fieldId,
 * e.g. merge or difference set calculation for multiple cells data in the same column, return data in cellValue format.
 *
 * ```tsx
 * import React from 'react';
 * import { useActiveCell, CellValue } from '@apitable/widget-sdk';
 *
 * export const CellValueUI = ({ cellValue }) => {
 *   const activeCell = useActiveCell();
 *   if (!activeCell) {
 *     return <p>Cells without activation</p>
 *   }
 *  const { fieldId } = activeCell;
 *   return (
 *     <CellValue
 *       className="wrapperClass"
 *       cellClassName="cellClass"
 *       cellValue={cellValue}
 *       fieldId={fieldId}
 *     />
 *   )
 * }
 * ```
 */
export declare const CellValue: (props: {
    recordId?: string;
    fieldId: string;
    cellValue?: unknown;
    className?: string;
    style?: CSSProperties;
    cellClassName?: string;
    cellStyle?: CSSProperties;
}) => JSX.Element | null;
//# sourceMappingURL=cell_value.d.ts.map